create table movie (mid integer primary key,title varchar(30),year varchar(5),director varchar(30));
create table reviewer(rid integer primary key,name varchar(30));
create table rating(rid integer,mid integer,stars integer,ratingDate date,FOREIGN KEY (rid) REFERENCES reviewer(rid),FOREIGN KEY (mid) REFERENCES  movie(mid));


1.Find the titles of all movies directed by Steven Spielberg. (1 point possible)

select title from movie where director like "Steven Spielberg";

E.T.
Raiders of the Lost Ark

2.Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. (1 point possible)
select ratingDate from rating where stars>=4 order by ratingDate asc;

2011-01-12
2011-01-19
2011-01-20
2011-01-27

3.Find the titles of all movies that have no ratings. (1 point possible)

select m.title from movie m where  m.mid not in(select r.mid from rating r);

Star Wars
Titanic


4.Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. (1 point possible)
select name from reviewer where rid in (select rid from rating where ratingdate is null);

Daniel Lewis
Chris Jackson

5.Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. (1 point possible)
select m.title,re.name,r.stars,r.ratingDate from movie m inner join rating r on m.mid = r.mid inner join reviewer re on re.rid = r.rid order by re.name,m.title,r.stars ;

E.T.			Ashley White	3	2011-01-02
Raiders of the Lost Ark	Brittany Harris	2	2011-01-30
Raiders of the Lost Ark	Brittany Harris	4	2011-01-12
The Sound of Music	Brittany Harris	2	2011-01-20
E.T.			Chris Jackson	2	2011-01-22
Raiders of the Lost Ark	Chris Jackson	4	
The Sound of Music	Chris Jackson	3	2011-01-27
Snow White		Daniel Lewis	4	
Avatar			Elizabeth Thomas3	2011-01-15
Snow White		Elizabeth Thomas5	2011-01-19
Avatar			James Cameron	5	2011-01-20
Gone with the Wind	Mike Anderson	3	2011-01-09
Gone with the Wind	Sarah Martinez	2	2011-01-22
Gone with the Wind	Sarah Martinez	4	2011-01-27

6.For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. (1 point possible)

7.For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. (1 point possible)

select m.title,r.stars from rating r inner join movie m on r.mid=m.mid group by m.title having max(r.stars); 

Avatar	5
E.T.	3
Gone with the Wind	4
Raiders of the Lost Ark	4
Snow White	5
The Sound of Music	3

8.For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. (1 point possible)

select m.title,max(r.stars)-min(r.stars) as rating_spread from rating r inner join movie m on r.mid=m.mid group by m.title order by max(r.stars)-min(r.stars) desc,m.title;

Avatar	2
Gone with the Wind	2
Raiders of the Lost Ark	2
E.T.	1
Snow White	1
The Sound of Music	1

9.Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) (1 point possible)


10.Find the names of all reviewers who rated Gone with the Wind. (1 point possible)

select re.name from reviewer re 
join rating r on re.rid=r.rid
join movie m on r.mid=m.mid
group by re.name
having m.title="Gone with the Wind";

Mike Anderson
Sarah Martinez

11.For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. (1 point possible)

select re.name,m.title,r.stars 
from reviewer re
join rating r on re.rid=r.rid
join movie m on r.mid=m.mid
group by m.director
having re.name=m.director;

James Cameron	Avatar	5


12.Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) (1 point possible)

select re.name,m.title
from rating ra 
join movie m on ra.mid=m.mid 
join reviewer re on ra.rid=re.rid group by re.name,m.title;

Ashley White	E.T.
Brittany Harris	Raiders of the Lost Ark
Brittany Harris	The Sound of Music
Chris Jackson	E.T.
Chris Jackson	Raiders of the Lost Ark
Chris Jackson	The Sound of Music
Daniel Lewis	Snow White
Elizabeth Thomas	Avatar
Elizabeth Thomas	Snow White
James Cameron	Avatar
Mike Anderson	Gone with the Wind
Sarah Martinez	Gone with the Wind

13.Find the titles of all movies not reviewed by Chris Jackson. (1 point possible)

select title from movie 
where mid not in (select r.mid from rating r join reviewer re on r.rid=re.rid having re.name like "Chris Jackson")

Star Wars
Titanic

14.For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. (1 point possible)

15.For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. (1 point possible)

select name,title,stars from ( select re.name,m.title,ra.stars, rank() over (order by ra.stars)r1 from rating ra join movie m on ra.mid=m.mid join reviewer re on ra.rid=re.rid) t where r1=1;


16.List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. (1 point possible)

select m.title, avg(r.stars)as avg from rating r join movie m on r.mid=m.mid group by m.mid order by avg(r.stars) desc, m.title

Snow White	4.5
Avatar	4
Raiders of the Lost Ark	3.33333333333333
Gone with the Wind	3
E.T.	2.5
The Sound of Music	2.5


17.Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) (1 point possible)

select re.name from reviewer re
join rating r on re.rid=r.rid
group by r.rid
having count(r.rid) >2;

Brittany Harris
Chris Jackson

18.Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) (1 point possible)


select m.director,m.title from movie m 
join movie m1 on m.director=m1.director 
group by m.mid having count(*)>=2 order by m.director,m.title


James Cameron		Avatar
James Cameron		Titanic
Steven Spielberg	E.T.
Steven Spielberg	Raiders of the Lost Ark

19.Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) (1 point possible)


20.Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) (1 point possible)

select t.title, avg from (select m.title, avg(ra.stars) as avg, rank() over (order by avg(ra.stars))r from rating ra join movie m  on ra.mid=m.mid group by m.title)t where r=1;


21.For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. (1 point possible)

select  title,director,stars from ( select distinct m.title,m.director,ra.stars, dense_rank() over (partition by m.director order by ra.stars desc)r from rating ra join movie m  on ra.mid=m.mid where m.director is not null)t where r=1;
